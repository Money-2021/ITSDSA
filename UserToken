
    public class UserToken
    {
        public class RecoveryResponse
        {
            public RecoveryResponse()
            {
            }
            public RecoveryResponse(bool protect = false)
            {
                isProtected = protect;
            }
            public long counter { get; set; }
            public byte[] share { get; set; }
            public string jwToken { get; set; }
            public bool? isProtected { get; set; } //  encrypted setupcode
        }
        public static long BytesToLong(byte[] bytes)
        {
            long l = BitConverter.ToInt64(bytes, 0);
            return System.Math.Abs(l);
        }
        public static byte[] LongToBytes(long value)
        {
            ulong _value = (ulong)value;

            return BitConverter.IsLittleEndian
                ? new[] { (byte)((_value >> 56) & 0xFF), (byte)((_value >> 48) & 0xFF), (byte)((_value >> 40) & 0xFF), (byte)((_value >> 32) & 0xFF), (byte)((_value >> 24) & 0xFF), (byte)((_value >> 16) & 0xFF), (byte)((_value >> 8) & 0xFF), (byte)(_value & 0xFF) }
                : new[] { (byte)(_value & 0xFF), (byte)((_value >> 8) & 0xFF), (byte)((_value >> 16) & 0xFF), (byte)((_value >> 24) & 0xFF), (byte)((_value >> 32) & 0xFF), (byte)((_value >> 40) & 0xFF), (byte)((_value >> 48) & 0xFF), (byte)((_value >> 56) & 0xFF) };
        }
      
        public static RecoveryResponse GetUserToken(string userTokenPath)
        {
            string sToken = System.IO.File.ReadAllText(userTokenPath);
            UserToken.RecoveryResponse rsp = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken);
            // Check protected
            if (rsp.isProtected.HasValue == false || rsp.isProtected == false)
            {

                // Always protect
                rsp.isProtected = true;
                byte[] encCode = Protect(rsp.share);
                // Check 
                byte[] pCode = UnProtect(encCode);
                if (pCode.SequenceEqual(rsp.share) == false)
                    throw new Exception("Setupcode different");
                rsp.share = encCode;
                // Save with encypted setupcode
                string json = System.Text.Json.JsonSerializer.Serialize<RecoveryResponse>(rsp);
                System.IO.File.WriteAllText(userTokenPath, json);
                // Return plaintext
                rsp.share = pCode;

            }
            else if (rsp.isProtected == true)
            {
                byte[] pCode = UnProtect(rsp.share);
                rsp.share = pCode;
            }
            // Check expire exp
            var securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(rsp.jwToken);
            var issuedAt = securityToken.IssuedAt;
            var validTo = securityToken.ValidTo;
            // Check refresh window 2 days before expired
            if (DateTime.UtcNow >= validTo.AddDays(-2))
            {
                RecoveryResponse r = user_TokenRefresh(rsp);
                securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(r.jwToken);
                issuedAt = securityToken.IssuedAt;
                validTo = securityToken.ValidTo;

                // Update UserToken
                rsp.jwToken = r.jwToken;
                rsp.share = r.share; // Mandatory refresh
                r.isProtected = false; // unprotected from refresh
                rsp.counter = r.counter;
                // Save 
                SaveUserToken(userTokenPath, r);
            }
            return rsp;
        }
        public static int GetCounter(string userTokenPath)
        {
            // Serialise
            JsonSerializerOptions jso = new JsonSerializerOptions();
            jso.Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping;
            string sToken = System.IO.File.ReadAllText(userTokenPath);
            RecoveryResponse rsp = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken, jso);
            return (int)rsp.counter;
        }
        public static void IncrementCounter(string userTokenPath)
        {
            // Serialise
            JsonSerializerOptions jso = new JsonSerializerOptions();
            jso.Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping;
            string sToken = System.IO.File.ReadAllText(userTokenPath);
            RecoveryResponse rsp = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken, jso);
            rsp.counter = rsp.counter + 1;
            // Save
            string json = System.Text.Json.JsonSerializer.Serialize<RecoveryResponse>(rsp, jso);
            System.IO.File.WriteAllText(userTokenPath, json);

        }
        public static void SaveUserToken(string userTokenPath, RecoveryResponse rsp)
        {
            // Encrypt setupcode
            // Check protected
            if (rsp.isProtected.HasValue == false || rsp.isProtected == false)
            {
                // setupcode in plaintext. so protect
                rsp.share = Protect(rsp.share);
                rsp.isProtected = true;
            }
            // Serialise
            JsonSerializerOptions jso = new JsonSerializerOptions();
            jso.Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping;
            string json = System.Text.Json.JsonSerializer.Serialize<RecoveryResponse>(rsp, jso);
            System.IO.File.WriteAllText(userTokenPath, json);

        }
        public static string BuildUrlWithQueryStringUsingUriBuilder(string basePath, Dictionary<string, string> queryParams)
        {
            var uriBuilder = new UriBuilder(basePath)
            {
                Query = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"))
            };
            return uriBuilder.Uri.AbsoluteUri;
        }

        private static byte[] Protect(byte[] share)
        {

            byte[] encBytes = ProtectedData.Protect(share, null, DataProtectionScope.CurrentUser);
            return encBytes;
        }
        private static byte[] UnProtect(byte[] share)
        {

            byte[] pBytes = ProtectedData.Unprotect(share, null, DataProtectionScope.CurrentUser);
            return pBytes;
        }
        private static RecoveryResponse user_TokenRefresh(RecoveryResponse r)
        {

            // Extract Function endpoint from User Token
            var securityToken = new JwtSecurityToken(r.jwToken);
            var claim = securityToken.Claims.FirstOrDefault(x => x.Type == "SecureIdentity");
            string _secureIdentity = claim.Value;
            claim = securityToken.Claims.FirstOrDefault(x => x.Type == System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Jti);
            string _jti = claim.Value;
            Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
            // Obtain Function JwToken
            HttpClient _httpClient = new HttpClient();
            // Build funtion endpoint Uri
            string _relativeUrl = "User/TokenRefresh";
            Uri _uri = new Uri(_baseUri, _relativeUrl);
            _httpClient.BaseAddress = _baseUri;
            // Add User Jwtoken
            _httpClient.DefaultRequestHeaders.Add("x-token", r.jwToken);
            // Add Jws 
            byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(_secureIdentity + _jti));
            string ssign = HmacProvider.SignHash(_secureIdentity, hashBytes, hashBytes);
            _httpClient.DefaultRequestHeaders.Add("x-jws-signature", ssign);
            // Get response
            HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
            if (response.IsSuccessStatusCode)
            {
                // pass
                string json = response.Content.ReadAsStringAsync().Result;
                // New Rec
                return System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(json);
            }
            else
            {
                // fail
                string error = response.Content.ReadAsStringAsync().Result;
                throw new Exception(error);
            }
        }
        public static string sign_me(string userTokenPath, byte[] hashBytes)
        {
            UserToken.RecoveryResponse r = UserToken.GetUserToken(userTokenPath);
            string userToken = r.jwToken;
            string sin = Jwt.ExtractSecureIdentity(userToken);
            // Extract endpoint from User Token
            var securityToken = new JwtSecurityToken(r.jwToken);
            Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
            //_baseUri = new Uri("http://localhost:54718/");

            // Obtain Function JwToken
            HttpClient _httpClient = new HttpClient();
            // Build funtion endpoint Uri
            string _relativeUrl = "Sign/SignMe";
            Uri _uri = new Uri(_baseUri, _relativeUrl);
            _httpClient.BaseAddress = _baseUri;

            // Add User Jwtoken
            _httpClient.DefaultRequestHeaders.Add("x-token", r.jwToken);
            // Add signature
            string ssign = HmacProvider.SignHash(sin, r.share, hashBytes, r.counter);
            _httpClient.DefaultRequestHeaders.Add("x-jws-signature", ssign);

            // Get response
            HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
            if (response.IsSuccessStatusCode)
            {

                Stream receiveStream = response.Content.ReadAsStream();
                StreamReader reader = new StreamReader(receiveStream, Encoding.UTF8);
                string jwToken = reader.ReadToEnd();
                return jwToken;
            }
            else
            {
                // fail
                string error = response.Content.ReadAsStringAsync().Result;
                if (string.IsNullOrEmpty(error))
                {
                    error = response.ReasonPhrase;
                }
                throw new Exception(error);
            }

        }

    }
    public class Base64Url
    {
        public static string Encode(byte[] input)
        {
            return Convert.ToBase64String(input).Split('=')[0].Replace('+', '-').Replace('/', '_');
        }

        public static byte[] Decode(string input)
        {
            string text = input;
            text = text.Replace('-', '+'); // 62nd char of encoding
            text = text.Replace('_', '/'); // 63rd char of encoding
            switch (text.Length % 4) // Pad with trailing '='s
            {
                case 2: // Two pad chars
                    text += "==";
                    break;
                case 3: // One pad char
                    text += "=";
                    break;
                case 0: // No pad chars in this case
                    break;
                default:
                    throw new ArgumentOutOfRangeException("input", "Illegal base64url string!");

            }

            return Convert.FromBase64String(text);
        }
    }
    public class HmacProvider
    {
        public enum SignRoleType
        {
            Sign, CounterSign, Witness, Notary
        }
        // HMAC using SHA-256
        public static string SignHash(string sin, byte[] share, byte[] hashBytes, long? counter = null)
        {
            UInt32 kid = Cryptography.Arrays.RandomUInt();
            byte[] nonce = Cryptography.Arrays.UIntToBytes(kid);
            byte[] _key = SHA256.Create().ComputeHash(share.Concat(nonce).ToArray());

            // Serialise Header
            MemoryStream ms = new MemoryStream();
            using (Utf8JsonWriter writer = new Utf8JsonWriter(ms))
            {
                writer.WriteStartObject();
                writer.WritePropertyName("alg");
                writer.WriteStringValue("HS256E"); // HMACSHA256
                writer.WritePropertyName("typ");
                writer.WriteStringValue("JWT");
                writer.WritePropertyName("kid");
                writer.WriteStringValue(kid.ToString());
                writer.WriteEndObject();

            }
            string encodedJwEHeader = Base64Url.Encode(ms.ToArray());
            string encodedHash = Base64Url.Encode(hashBytes);

            // serialise Payload
            ms = new MemoryStream();
            using (Utf8JsonWriter writer = new Utf8JsonWriter(ms))
            {
                writer.WriteStartObject();
                writer.WritePropertyName("SecureIdentity");
                writer.WriteStringValue(sin);
                writer.WritePropertyName("Hash");
                writer.WriteStringValue(encodedHash);
                if (counter.HasValue)
                {
                    writer.WritePropertyName("Counter");
                    writer.WriteNumberValue(counter.Value);
                }
                writer.WriteEndObject();

            }
            string encodedPayload = Base64Url.Encode(ms.ToArray());
            byte[] sigBytes = Encoding.UTF8.GetBytes(encodedJwEHeader + "." + encodedPayload);
            byte[] sig = new HMACSHA256(_key).ComputeHash(sigBytes);
            string encodedJWESignature = Base64Url.Encode(sig);
            return encodedJwEHeader + "." + encodedPayload + "." + encodedJWESignature;
        }

    }
}
